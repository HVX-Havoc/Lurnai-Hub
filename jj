local settings = { print_logs = true, save_logs = false }

local serializer = {}

function serializer:log_output(file_path, data)
    local output = data .. '\n\n'
    if settings.print_logs then
        print('Log Output:\n' .. output)
    end
    if settings.save_logs then
        appendfile(file_path, output) -- Only works on some exploits!
    end
end

function serializer:serialize(tbl, indent)
    indent = indent or 0
    local result = '{\n'
    for i, v in next, tbl do
        local _i, _v
        if type(i) == 'number' then 
            _i = '\t[' .. i .. ']'
        else
            _i = '\t["' .. i .. '"]'
        end
        if type(v) == 'table' then
            _v = self:serialize(v, indent + 1)
        elseif type(v) == 'string' then
            _v = '"' .. v .. '"'
        else
            _v = tostring(v)
        end
        result = result .. string.rep('\t', indent) .. _i .. ' = ' .. _v .. ',\n'
    end
    return result:sub(1, #result - 2) .. '\n' .. string.rep('\t', indent) .. '}'
end

function serializer:request_table_reset(tbl)
    local new_tbl = {}
    local _url = tbl[1]
    local _method = tbl[2]
    local _body = tbl[3]

    new_tbl['Url'] = _url
    new_tbl['Method'] = _method

    if _body then
        new_tbl['Body'] = _body
    end

    return new_tbl
end

-- === HOOK-ONCE PROTECTION ===
if not getgenv()._http_logger_hooked then
    getgenv()._http_logger_hooked = true -- prevent double hook
    local request_data, request_index = {}, 0

    -- Hook game.HttpGet
    local old_HttpGet = game.HttpGet
    game.HttpGet = function(self, ...)
        local vararg = {...}
        local serialized = serializer:serialize(vararg)
        serializer:log_output('http_get_logs.txt', serialized)
        return old_HttpGet(self, ...)
    end

    -- Hook request (if exists)
    if request then
        local old_request = request
        getgenv().request = function(payload)
            local _minimum = 0
            request_index = request_index + 1
            local current_tbl = {
                [1] = payload['Url'],
                [2] = payload['Method'],
                [3] = payload['Body']    
            }
            if payload['Method'] == 'GET' then
                _minimum = 2
            else
                _minimum = 3
            end
            if #current_tbl >= _minimum then
                local serialized = serializer:serialize(serializer:request_table_reset(current_tbl))
                serializer:log_output('request_logs.txt', serialized)
            end
            return old_request(payload)
        end
    end
    print("[Logger] HTTP hooks installed.")
else
    print("[Logger] Already hooked - no overload.")
end
