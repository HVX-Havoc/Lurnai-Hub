--[[

Lurnai Hub By Havoc (RENEWED)

--]]

local Library = {}
Library.Version = "1.0.0"

-- Utility functions
local function findSuitableParent()
    local success = pcall(function()
        local coreGui = game:GetService("CoreGui")
        local test = Instance.new("Folder")
        test.Name = "TestAccess"
        test.Parent = coreGui
        test:Destroy()
    end)
    
    if success then
        return game:GetService("CoreGui")
    end
    
    local alternatives = {
        game:GetService("Players").LocalPlayer:FindFirstChildOfClass("PlayerGui"),
        game.CoreGui,
        game:GetService("StarterGui"),
        game
    }
    
    for _, parent in ipairs(alternatives) do
        if parent then
            local testSuccess = pcall(function()
                local test = Instance.new("Folder")
                test.Name = "TestAccess"
                test.Parent = parent
                test:Destroy()
            end)
            
            if testSuccess then
                return parent
            end
        end
    end
    
    return nil
end

-- Tween service for animations
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Theme configuration
Library.Themes = {
    Dark = {
        MainBackground = Color3.fromRGB(30, 30, 35),
        SecondaryBackground = Color3.fromRGB(40, 40, 45),
        Accent = Color3.fromRGB(96, 205, 255),
        TextColor = Color3.fromRGB(240, 240, 240),
        SubTextColor = Color3.fromRGB(180, 180, 180),
        TabBackground = Color3.fromRGB(35, 35, 40),
        ElementBackground = Color3.fromRGB(45, 45, 50),
        ElementBackgroundHover = Color3.fromRGB(55, 55, 60),
        SliderBackground = Color3.fromRGB(50, 50, 55),
        DropdownBackground = Color3.fromRGB(45, 45, 50),
        ToggleBackground = Color3.fromRGB(45, 45, 50),
        ToggleEnabled = Color3.fromRGB(96, 205, 255),
        InputBackground = Color3.fromRGB(45, 45, 50),
        NotificationBackground = Color3.fromRGB(35, 35, 40)
    },
    Light = {
        MainBackground = Color3.fromRGB(240, 240, 245),
        SecondaryBackground = Color3.fromRGB(230, 230, 235),
        Accent = Color3.fromRGB(0, 120, 215),
        TextColor = Color3.fromRGB(30, 30, 35),
        SubTextColor = Color3.fromRGB(100, 100, 110),
        TabBackground = Color3.fromRGB(225, 225, 230),
        ElementBackground = Color3.fromRGB(220, 220, 225),
        ElementBackgroundHover = Color3.fromRGB(210, 210, 215),
        SliderBackground = Color3.fromRGB(210, 210, 215),
        DropdownBackground = Color3.fromRGB(220, 220, 225),
        ToggleBackground = Color3.fromRGB(200, 200, 205),
        ToggleEnabled = Color3.fromRGB(0, 120, 215),
        InputBackground = Color3.fromRGB(220, 220, 225),
        NotificationBackground = Color3.fromRGB(230, 230, 235)
    }
}

-- Current theme
Library.CurrentTheme = Library.Themes.Dark
Library.Options = {}
Library.Windows = {}
Library.Unloaded = false

-- Create rounded rectangle
local function createRoundRect(name, size, color, cornerRadius, parent)
    local frame = Instance.new("Frame")
    frame.Name = name
    frame.Size = size
    frame.BackgroundColor3 = color
    frame.BorderSizePixel = 0
    frame.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, cornerRadius or 6)
    corner.Parent = frame
    
    return frame
end

-- Create shadow effect
local function createShadow(parent, shadowSize)
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.fromScale(0.5, 0.5)
    shadow.Size = UDim2.new(1, shadowSize or 30, 1, shadowSize or 30)
    shadow.ZIndex = 0
    shadow.Image = "rbxassetid://6014261993"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.6
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    shadow.Parent = parent
    
    return shadow
end

-- Create a window
function Library:CreateWindow(options)
    options = options or {}
    local window = {}
    
    -- Default options
    local title = options.Title or "Modern UI"
    local subTitle = options.SubTitle or ""
    local size = options.Size or UDim2.fromOffset(800, 500)
    local minSize = options.MinSize or Vector2.new(400, 300)
    local theme = options.Theme or "Dark"
    local toggleKey = options.MinimizeKey or Enum.KeyCode.RightControl
    local canResize = options.Resize ~= false
    
    -- Set theme
    Library.CurrentTheme = Library.Themes[theme] or Library.Themes.Dark
    
    -- Find parent
    local parent = findSuitableParent()
    if not parent then
        error("Could not find a suitable parent for the UI")
        return
    end
    
    -- Create main GUI
    local existingUI = parent:FindFirstChild("ModernUI")
    if existingUI then 
        existingUI:Destroy() 
    end
    
    local gui = Instance.new("ScreenGui")
    gui.Name = "ModernUI"
    gui.Parent = parent
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if parent:IsA("PlayerGui") then
        gui.ResetOnSpawn = false
    end
    
    -- Create main container
    local mainContainer = createRoundRect("MainContainer", size, Library.CurrentTheme.MainBackground, 8, gui)
    mainContainer.ClipsDescendants = true
    mainContainer.Position = UDim2.new(0.5, -size.X.Offset / 2, 0.5, -size.Y.Offset / 2)
    
    -- Add shadow
    createShadow(mainContainer)
    
    -- Create title bar
    local titleBar = createRoundRect("TitleBar", UDim2.new(1, 0, 0, 40), Library.CurrentTheme.SecondaryBackground, 0, mainContainer)
    titleBar.BorderSizePixel = 0
    
    local topLeftCorner = Instance.new("UICorner")
    topLeftCorner.CornerRadius = UDim.new(0, 8)
    topLeftCorner.Parent = titleBar
    
    -- Only round the top corners
    local bottomLeftFrame = Instance.new("Frame")
    bottomLeftFrame.Name = "BottomLeftFrame"
    bottomLeftFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
    bottomLeftFrame.Position = UDim2.new(0, 0, 0.5, 0)
    bottomLeftFrame.BorderSizePixel = 0
    bottomLeftFrame.BackgroundColor3 = Library.CurrentTheme.SecondaryBackground
    bottomLeftFrame.Parent = titleBar
    
    local bottomRightFrame = Instance.new("Frame")
    bottomRightFrame.Name = "BottomRightFrame"
    bottomRightFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
    bottomRightFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    bottomRightFrame.BorderSizePixel = 0
    bottomRightFrame.BackgroundColor3 = Library.CurrentTheme.SecondaryBackground
    bottomRightFrame.Parent = titleBar
    
    -- Title text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(0, 200, 1, 0)
    titleText.Position = UDim2.new(0, 15, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Font = Enum.Font.GothamBold
    titleText.Text = title
    titleText.TextColor3 = Library.CurrentTheme.TextColor
    titleText.TextSize = 16
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Subtitle text
    local subTitleText = Instance.new("TextLabel")
    subTitleText.Name = "SubTitle"
    subTitleText.Size = UDim2.new(0, 200, 1, 0)
    subTitleText.Position = UDim2.new(0, 200, 0, 0)
    subTitleText.BackgroundTransparency = 1
    subTitleText.Font = Enum.Font.Gotham
    subTitleText.Text = subTitle
    subTitleText.TextColor3 = Library.CurrentTheme.SubTextColor
    subTitleText.TextSize = 14
    subTitleText.TextXAlignment = Enum.TextXAlignment.Left
    subTitleText.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 40, 0, 40)
    closeButton.Position = UDim2.new(1, -40, 0, 0)
    closeButton.BackgroundTransparency = 1
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Text = "×"
    closeButton.TextColor3 = Library.CurrentTheme.TextColor
    closeButton.TextSize = 24
    closeButton.Parent = titleBar
    
    -- Minimize button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 40, 0, 40)
    minimizeButton.Position = UDim2.new(1, -80, 0, 0)
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.Text = "−"
    minimizeButton.TextColor3 = Library.CurrentTheme.TextColor
    minimizeButton.TextSize = 24
    minimizeButton.Parent = titleBar
    
    -- Content container
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "ContentContainer"
    contentContainer.Size = UDim2.new(1, 0, 1, -40)
    contentContainer.Position = UDim2.new(0, 0, 0, 40)
    contentContainer.BackgroundTransparency = 1
    contentContainer.BorderSizePixel = 0
    contentContainer.Parent = mainContainer
    
    -- Tab container
    local tabContainer = createRoundRect("TabContainer", UDim2.new(0, 160, 1, 0), Library.CurrentTheme.TabBackground, 0, contentContainer)
    tabContainer.BorderSizePixel = 0
    
    -- Only round the bottom left corner
    local tabContainerCorner = Instance.new("UICorner")
    tabContainerCorner.CornerRadius = UDim.new(0, 8)
    tabContainerCorner.Parent = tabContainer
    
    local topRightFrame = Instance.new("Frame")
    topRightFrame.Name = "TopRightFrame"
    topRightFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
    topRightFrame.Position = UDim2.new(0.5, 0, 0, 0)
    topRightFrame.BorderSizePixel = 0
    topRightFrame.BackgroundColor3 = Library.CurrentTheme.TabBackground
    topRightFrame.Parent = tabContainer
    
    local bottomRightFrame2 = Instance.new("Frame")
    bottomRightFrame2.Name = "BottomRightFrame"
    bottomRightFrame2.Size = UDim2.new(0.5, 0, 0.5, 0)
    bottomRightFrame2.Position = UDim2.new(0.5, 0, 0.5, 0)
    bottomRightFrame2.BorderSizePixel = 0
    bottomRightFrame2.BackgroundColor3 = Library.CurrentTheme.TabBackground
    bottomRightFrame2.Parent = tabContainer
    
    -- Tab buttons container
    local tabButtonsContainer = Instance.new("ScrollingFrame")
    tabButtonsContainer.Name = "TabButtonsContainer"
    tabButtonsContainer.Size = UDim2.new(1, 0, 1, 0)
    tabButtonsContainer.BackgroundTransparency = 1
    tabButtonsContainer.BorderSizePixel = 0
    tabButtonsContainer.ScrollBarThickness = 0
    tabButtonsContainer.ScrollingDirection = Enum.ScrollingDirection.Y
    tabButtonsContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabButtonsContainer.Parent = tabContainer
    
    local tabButtonsLayout = Instance.new("UIListLayout")
    tabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabButtonsLayout.Padding = UDim.new(0, 5)
    tabButtonsLayout.Parent = tabButtonsContainer
    
    local tabButtonsPadding = Instance.new("UIPadding")
    tabButtonsPadding.PaddingTop = UDim.new(0, 10)
    tabButtonsPadding.PaddingLeft = UDim.new(0, 10)
    tabButtonsPadding.PaddingRight = UDim.new(0, 10)
    tabButtonsPadding.Parent = tabButtonsContainer
    
    -- Tab content container
    local tabContentContainer = Instance.new("Frame")
    tabContentContainer.Name = "TabContentContainer"
    tabContentContainer.Size = UDim2.new(1, -160, 1, 0)
    tabContentContainer.Position = UDim2.new(0, 160, 0, 0)
    tabContentContainer.BackgroundTransparency = 1
    tabContentContainer.BorderSizePixel = 0
    tabContentContainer.Parent = contentContainer
    
    -- Resize handle
    local resizeHandle = nil
    if canResize then
        resizeHandle = Instance.new("TextButton")
        resizeHandle.Name = "ResizeHandle"
        resizeHandle.Size = UDim2.new(0, 20, 0, 20)
        resizeHandle.Position = UDim2.new(1, -20, 1, -20)
        resizeHandle.BackgroundTransparency = 1
        resizeHandle.Text = ""
        resizeHandle.Parent = mainContainer
        
        local resizeIcon = Instance.new("ImageLabel")
        resizeIcon.Name = "ResizeIcon"
        resizeIcon.Size = UDim2.new(0, 16, 0, 16)
        resizeIcon.Position = UDim2.new(0, 2, 0, 2)
        resizeIcon.BackgroundTransparency = 1
        resizeIcon.Image = "rbxassetid://7248851027"
        resizeIcon.ImageColor3 = Library.CurrentTheme.SubTextColor
        resizeIcon.Parent = resizeHandle
    end
    
    -- Variables
    local tabs = {}
    local currentTab = nil
    local isDragging = false
    local dragStart = nil
    local startPos = nil
    local isResizing = false
    local minimized = false
    local originalSize = size
    
    -- Functions
    local function updateTabButtonsCanvas()
        local contentSize = tabButtonsLayout.AbsoluteContentSize
        tabButtonsContainer.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 20)
    end
    
    -- Make window draggable
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            dragStart = input.Position
            startPos = mainContainer.Position
        end
    end)
    
    titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    -- Make window resizable
    if resizeHandle then
        resizeHandle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                isResizing = true
            end
        end)
        
        resizeHandle.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                isResizing = false
            end
        end)
    end
    
    -- Handle dragging and resizing
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if isDragging then
                local delta = input.Position - dragStart
                mainContainer.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            elseif isResizing then
                local mousePos = UserInputService:GetMouseLocation()
                local absolutePos = mainContainer.AbsolutePosition
                local newWidth = mousePos.X - absolutePos.X
                local newHeight = mousePos.Y - absolutePos.Y
                
                newWidth = math.max(newWidth, minSize.X)
                newHeight = math.max(newHeight, minSize.Y)
                
                mainContainer.Size = UDim2.new(0, newWidth, 0, newHeight)
            end
        end
    end)
    
    -- Close button
    closeButton.MouseButton1Click:Connect(function()
        gui:Destroy()
        Library.Unloaded = true
    end)
    
    -- Minimize button
    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            originalSize = mainContainer.Size
            mainContainer.Size = UDim2.new(0, originalSize.X.Offset, 0, 40)
            contentContainer.Visible = false
        else
            mainContainer.Size = originalSize
            contentContainer.Visible = true
        end
    end)
    
    -- Toggle key
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == toggleKey then
            gui.Enabled = not gui.Enabled
        end
    end)
    
    -- Create a tab
    function window:CreateTab(options)
        options = options or {}
        local tab = {}
        
        local title = options.Title or "Tab"
        local icon = options.Icon
        
        -- Create tab button
        local tabButton = createRoundRect("TabButton", UDim2.new(1, 0, 0, 36), Library.CurrentTheme.ElementBackground, 6, tabButtonsContainer)
        
        -- Tab button content
        local tabButtonLayout = Instance.new("UIListLayout")
        tabButtonLayout.FillDirection = Enum.FillDirection.Horizontal
        tabButtonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        tabButtonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        tabButtonLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabButtonLayout.Padding = UDim.new(0, 8)
        tabButtonLayout.Parent = tabButton
        
        local tabButtonPadding = Instance.new("UIPadding")
        tabButtonPadding.PaddingLeft = UDim.new(0, 10)
        tabButtonPadding.Parent = tabButton
        
        -- Icon (if provided)
        if icon then
            local iconImage = Instance.new("ImageLabel")
            iconImage.Name = "Icon"
            iconImage.Size = UDim2.new(0, 16, 0, 16)
            iconImage.BackgroundTransparency = 1
            iconImage.Image = (icon:find("rbxassetid://") and icon) or ("rbxassetid://" .. icon)
            iconImage.ImageColor3 = Library.CurrentTheme.TextColor
            iconImage.Parent = tabButton
        end
        
        -- Tab title
        local tabTitle = Instance.new("TextLabel")
        tabTitle.Name = "Title"
        tabTitle.Size = UDim2.new(1, -30, 1, 0)
        tabTitle.BackgroundTransparency = 1
        tabTitle.Font = Enum.Font.Gotham
        tabTitle.Text = title
        tabTitle.TextColor3 = Library.CurrentTheme.TextColor
        tabTitle.TextSize = 14
        tabTitle.TextXAlignment = Enum.TextXAlignment.Left
        tabTitle.Parent = tabButton
        
        -- Tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = "TabContent"
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = 4
        tabContent.ScrollingDirection = Enum.ScrollingDirection.Y
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.Visible = false
        tabContent.Parent = tabContentContainer
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 10)
        contentLayout.Parent = tabContent
        
        local contentPadding = Instance.new("UIPadding")
        contentPadding.PaddingTop = UDim.new(0, 15)
        contentPadding.PaddingLeft = UDim.new(0, 15)
        contentPadding.PaddingRight = UDim.new(0, 15)
        contentPadding.PaddingBottom = UDim.new(0, 15)
        contentPadding.Parent = tabContent
        
        -- Update canvas size when elements are added
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 30)
        end)
        
        -- Tab button click
        tabButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                window:SelectTab(#tabs + 1)
            end
        end)
        
        -- Add to tabs list
        table.insert(tabs, {
            Button = tabButton,
            Content = tabContent
        })
        
        -- Update tab buttons canvas
        updateTabButtonsCanvas()
        
        -- Select this tab if it's the first one
        if #tabs == 1 then
            window:SelectTab(1)
        end
        
        -- Tab elements
        function tab:CreateButton(options)
            options = options or {}
            local buttonElement = {}
            
            local title = options.Title or "Button"
            local description = options.Description
            local callback = options.Callback or function() end
            
            -- Create button container
            local buttonContainer = createRoundRect("ButtonContainer", UDim2.new(1, 0, 0, description and 60 or 36), Library.CurrentTheme.ElementBackground, 6, tabContent)
            
            -- Button content
            local buttonLayout = Instance.new("UIListLayout")
            buttonLayout.FillDirection = Enum.FillDirection.Vertical
            buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
            buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
            buttonLayout.Padding = UDim.new(0, 4)
            buttonLayout.Parent = buttonContainer
            
            local buttonPadding = Instance.new("UIPadding")
            buttonPadding.PaddingLeft = UDim.new(0, 10)
            buttonPadding.PaddingRight = UDim.new(0, 10)
            buttonPadding.Parent = buttonContainer
            
            -- Button title
            local buttonTitle = Instance.new("TextLabel")
            buttonTitle.Name = "Title"
            buttonTitle.Size = UDim2.new(1, 0, 0, 20)
            buttonTitle.BackgroundTransparency = 1
            buttonTitle.Font = Enum.Font.GothamSemibold
            buttonTitle.Text = title
            buttonTitle.TextColor3 = Library.CurrentTheme.TextColor
            buttonTitle.TextSize = 14
            buttonTitle.TextXAlignment = Enum.TextXAlignment.Left
            buttonTitle.Parent = buttonContainer
            
            -- Button description (if provided)
            if description then
                local buttonDesc = Instance.new("TextLabel")
                buttonDesc.Name = "Description"
                buttonDesc.Size = UDim2.new(1, 0, 0, 20)
                buttonDesc.BackgroundTransparency = 1
                buttonDesc.Font = Enum.Font.Gotham
                buttonDesc.Text = description
                buttonDesc.TextColor3 = Library.CurrentTheme.SubTextColor
                buttonDesc.TextSize = 12
                buttonDesc.TextXAlignment = Enum.TextXAlignment.Left
                buttonDesc.Parent = buttonContainer
            end
            
            -- Button hover and click effects
            buttonContainer.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    -- Click effect
                    TweenService:Create(buttonContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.Accent
                    }):Play()
                    
                    callback()
                    
                    TweenService:Create(buttonContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(buttonContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            buttonContainer.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(buttonContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            return buttonElement
        end
        
        function tab:CreateToggle(id, options)
            options = options or {}
            local toggleElement = {}
            
            local title = options.Title or "Toggle"
            local default = options.Default or false
            local callback = options.Callback or function() end
            
            -- Create toggle container
            local toggleContainer = createRoundRect("ToggleContainer", UDim2.new(1, 0, 0, 36), Library.CurrentTheme.ElementBackground, 6, tabContent)
            
            -- Toggle layout
            local toggleLayout = Instance.new("UIListLayout")
            toggleLayout.FillDirection = Enum.FillDirection.Horizontal
            toggleLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            toggleLayout.VerticalAlignment = Enum.VerticalAlignment.Center
            toggleLayout.SortOrder = Enum.SortOrder.LayoutOrder
            toggleLayout.Padding = UDim.new(0, 10)
            toggleLayout.Parent = toggleContainer
            
            local togglePadding = Instance.new("UIPadding")
            togglePadding.PaddingLeft = UDim.new(0, 10)
            togglePadding.PaddingRight = UDim.new(0, 10)
            togglePadding.Parent = toggleContainer
            
            -- Toggle switch
            local toggleSwitch = createRoundRect("Switch", UDim2.new(0, 36, 0, 18), Library.CurrentTheme.ToggleBackground, 9, toggleContainer)
            
            -- Toggle indicator
            local toggleIndicator = createRoundRect("Indicator", UDim2.new(0, 14, 0, 14), Color3.fromRGB(255, 255, 255), 7, toggleSwitch)
            toggleIndicator.Position = UDim2.new(0, 2, 0, 2)
            
            -- Toggle title
            local toggleTitle = Instance.new("TextLabel")
            toggleTitle.Name = "Title"
            toggleTitle.Size = UDim2.new(1, -46, 1, 0)
            toggleTitle.BackgroundTransparency = 1
            toggleTitle.Font = Enum.Font.GothamSemibold
            toggleTitle.Text = title
            toggleTitle.TextColor3 = Library.CurrentTheme.TextColor
            toggleTitle.TextSize = 14
            toggleTitle.TextXAlignment = Enum.TextXAlignment.Left
            toggleTitle.Parent = toggleContainer
            
            -- Toggle state and functions
            local toggled = default
            
            local function updateToggle()
                if toggled then
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {
                        BackgroundColor3 = Library.CurrentTheme.ToggleEnabled
                    }):Play()
                    
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {
                        Position = UDim2.new(1, -16, 0, 2)
                    }):Play()
                else
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {
                        BackgroundColor3 = Library.CurrentTheme.ToggleBackground
                    }):Play()
                    
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {
                        Position = UDim2.new(0, 2, 0, 2)
                    }):Play()
                end
                
                Library.Options[id] = {Value = toggled}
                callback(toggled)
            end
            
            -- Initialize toggle state
            updateToggle()
            
            -- Toggle interaction
            toggleContainer.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    toggled = not toggled
                    updateToggle()
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(toggleContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            toggleContainer.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(toggleContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            -- Toggle API
            function toggleElement:SetValue(value)
                toggled = value
                updateToggle()
            end
            
            function toggleElement:GetValue()
                return toggled
            end
            
            function toggleElement:OnChanged(func)
                callback = func
            end
            
            Library.Options[id] = toggleElement
            return toggleElement
        end
        
        function tab:CreateSlider(id, options)
            options = options or {}
            local sliderElement = {}
            
            local title = options.Title or "Slider"
            local description = options.Description
            local min = options.Min or 0
            local max = options.Max or 100
            local default = options.Default or min
            local rounding = options.Rounding or 0
            local callback = options.Callback or function() end
            
            -- Clamp default value
            default = math.clamp(default, min, max)
            
            -- Create slider container
            local sliderContainer = createRoundRect("SliderContainer", UDim2.new(1, 0, 0, description and 70 or 50), Library.CurrentTheme.ElementBackground, 6, tabContent)
            
            -- Slider layout
            local sliderLayout = Instance.new("UIListLayout")
            sliderLayout.FillDirection = Enum.FillDirection.Vertical
            sliderLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            sliderLayout.VerticalAlignment = Enum.VerticalAlignment.Top
            sliderLayout.SortOrder = Enum.SortOrder.LayoutOrder
            sliderLayout.Padding = UDim.new(0, 5)
            sliderLayout.Parent = sliderContainer
            
            local sliderPadding = Instance.new("UIPadding")
            sliderPadding.PaddingTop = UDim.new(0, 10)
            sliderPadding.PaddingLeft = UDim.new(0, 10)
            sliderPadding.PaddingRight = UDim.new(0, 10)
            sliderPadding.PaddingBottom = UDim.new(0, 10)
            sliderPadding.Parent = sliderContainer
            
            -- Slider title
            local sliderTitle = Instance.new("TextLabel")
            sliderTitle.Name = "Title"
            sliderTitle.Size = UDim2.new(1, 0, 0, 20)
            sliderTitle.BackgroundTransparency = 1
            sliderTitle.Font = Enum.Font.GothamSemibold
            sliderTitle.Text = title
            sliderTitle.TextColor3 = Library.CurrentTheme.TextColor
            sliderTitle.TextSize = 14
            sliderTitle.TextXAlignment = Enum.TextXAlignment.Left
            sliderTitle.Parent = sliderContainer
            
            -- Slider description (if provided)
            if description then
                local sliderDesc = Instance.new("TextLabel")
                sliderDesc.Name = "Description"
                sliderDesc.Size = UDim2.new(1, 0, 0, 16)
                sliderDesc.BackgroundTransparency = 1
                sliderDesc.Font = Enum.Font.Gotham
                sliderDesc.Text = description
                sliderDesc.TextColor3 = Library.CurrentTheme.SubTextColor
                sliderDesc.TextSize = 12
                sliderDesc.TextXAlignment = Enum.TextXAlignment.Left
                sliderDesc.Parent = sliderContainer
            end
            
            -- Slider track
            local sliderTrack = createRoundRect("Track", UDim2.new(1, 0, 0, 6), Library.CurrentTheme.SliderBackground, 3, sliderContainer)
            
            -- Slider fill
            local sliderFill = createRoundRect("Fill", UDim2.new(0, 0, 1, 0), Library.CurrentTheme.Accent, 3, sliderTrack)
            
            -- Slider value text
            local sliderValue = Instance.new("TextLabel")
            sliderValue.Name = "Value"
            sliderValue.Size = UDim2.new(0, 50, 0, 20)
            sliderValue.Position = UDim2.new(1, -50, 0, 0)
            sliderValue.BackgroundTransparency = 1
            sliderValue.Font = Enum.Font.GothamSemibold
            sliderValue.TextColor3 = Library.CurrentTheme.TextColor
            sliderValue.TextSize = 14
            sliderValue.TextXAlignment = Enum.TextXAlignment.Right
            sliderValue.Parent = sliderTitle
            
            -- Slider state and functions
            local value = default
            local isDragging = false
            
            local function updateSlider(newValue)
                -- Clamp and round the value
                value = math.clamp(newValue, min, max)
                if rounding > 0 then
                    value = math.floor(value * (10 ^ rounding)) / (10 ^ rounding)
                else
                    value = math.floor(value)
                end
                
                -- Calculate fill percentage
                local percent = (value - min) / (max - min)
                
                -- Update UI
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                sliderValue.Text = tostring(value)
                
                -- Update option and callback
                Library.Options[id] = {Value = value}
                callback(value)
            end
            
            -- Initialize slider
            updateSlider(default)
            
            -- Slider interaction
            sliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                    
                    -- Calculate value from mouse position
                    local percent = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
                    local newValue = min + (max - min) * percent
                    
                    updateSlider(newValue)
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(sliderContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            sliderTrack.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(sliderContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            sliderContainer.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(sliderContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            sliderContainer.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(sliderContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            -- Update slider when dragging
            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
                    -- Calculate value from mouse position
                    local percent = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
                    local newValue = min + (max - min) * percent
                    
                    updateSlider(newValue)
                end
            end)
            
            -- Slider API
            function sliderElement:SetValue(newValue)
                updateSlider(newValue)
            end
            
            function sliderElement:GetValue()
                return value
            end
            
            function sliderElement:OnChanged(func)
                callback = func
            end
            
            Library.Options[id] = sliderElement
            return sliderElement
        end
        
        function tab:CreateDropdown(id, options)
            options = options or {}
            local dropdownElement = {}
            
            local title = options.Title or "Dropdown"
            local description = options.Description
            local values = options.Values or {}
            local default = options.Default or (options.Multi and {} or nil)
            local multi = options.Multi or false
            local callback = options.Callback or function() end
            
            -- Create dropdown container
            local dropdownContainer = createRoundRect("DropdownContainer", UDim2.new(1, 0, 0, description and 70 or 50), Library.CurrentTheme.ElementBackground, 6, tabContent)
            
            -- Dropdown layout
            local dropdownLayout = Instance.new("UIListLayout")
            dropdownLayout.FillDirection = Enum.FillDirection.Vertical
            dropdownLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            dropdownLayout.VerticalAlignment = Enum.VerticalAlignment.Top
            dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
            dropdownLayout.Padding = UDim.new(0, 5)
            dropdownLayout.Parent = dropdownContainer
            
            local dropdownPadding = Instance.new("UIPadding")
            dropdownPadding.PaddingTop = UDim.new(0, 10)
            dropdownPadding.PaddingLeft = UDim.new(0, 10)
            dropdownPadding.PaddingRight = UDim.new(0, 10)
            dropdownPadding.PaddingBottom = UDim.new(0, 10)
            dropdownPadding.Parent = dropdownContainer
            
            -- Dropdown title
            local dropdownTitle = Instance.new("TextLabel")
            dropdownTitle.Name = "Title"
            dropdownTitle.Size = UDim2.new(1, 0, 0, 20)
            dropdownTitle.BackgroundTransparency = 1
            dropdownTitle.Font = Enum.Font.GothamSemibold
            dropdownTitle.Text = title
            dropdownTitle.TextColor3 = Library.CurrentTheme.TextColor
            dropdownTitle.TextSize = 14
            dropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
            dropdownTitle.Parent = dropdownContainer
            
            -- Dropdown description (if provided)
            if description then
                local dropdownDesc = Instance.new("TextLabel")
                dropdownDesc.Name = "Description"
                dropdownDesc.Size = UDim2.new(1, 0, 0, 16)
                dropdownDesc.BackgroundTransparency = 1
                dropdownDesc.Font = Enum.Font.Gotham
                dropdownDesc.Text = description
                dropdownDesc.TextColor3 = Library.CurrentTheme.SubTextColor
                dropdownDesc.TextSize = 12
                dropdownDesc.TextXAlignment = Enum.TextXAlignment.Left
                dropdownDesc.Parent = dropdownContainer
            end
            
            -- Dropdown button
            local dropdownButton = createRoundRect("Button", UDim2.new(1, 0, 0, 30), Library.CurrentTheme.DropdownBackground, 6, dropdownContainer)
            
            -- Dropdown text
            local dropdownText = Instance.new("TextLabel")
            dropdownText.Name = "Text"
            dropdownText.Size = UDim2.new(1, -30, 1, 0)
            dropdownText.Position = UDim2.new(0, 10, 0, 0)
            dropdownText.BackgroundTransparency = 1
            dropdownText.Font = Enum.Font.Gotham
            dropdownText.Text = multi and "Select items..." or "Select an item..."
            dropdownText.TextColor3 = Library.CurrentTheme.SubTextColor
            dropdownText.TextSize = 14
            dropdownText.TextXAlignment = Enum.TextXAlignment.Left
            dropdownText.Parent = dropdownButton
            
            -- Dropdown arrow
            local dropdownArrow = Instance.new("ImageLabel")
            dropdownArrow.Name = "Arrow"
            dropdownArrow.Size = UDim2.new(0, 16, 0, 16)
            dropdownArrow.Position = UDim2.new(1, -26, 0, 7)
            dropdownArrow.BackgroundTransparency = 1
            dropdownArrow.Image = "rbxassetid://6031091004"
            dropdownArrow.ImageColor3 = Library.CurrentTheme.TextColor
            dropdownArrow.Parent = dropdownButton
            
            -- Dropdown list container
            local dropdownList = createRoundRect("List", UDim2.new(1, 0, 0, 0), Library.CurrentTheme.DropdownBackground, 6, dropdownContainer)
            dropdownList.Visible = false
            dropdownList.ClipsDescendants = true
            dropdownList.ZIndex = 10
            
            -- Dropdown list layout
            local listLayout = Instance.new("UIListLayout")
            listLayout.FillDirection = Enum.FillDirection.Vertical
            listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            listLayout.VerticalAlignment = Enum.VerticalAlignment.Top
            listLayout.SortOrder = Enum.SortOrder.LayoutOrder
            listLayout.Padding = UDim.new(0, 5)
            listLayout.Parent = dropdownList
            
            local listPadding = Instance.new("UIPadding")
            listPadding.PaddingTop = UDim.new(0, 5)
            listPadding.PaddingLeft = UDim.new(0, 5)
            listPadding.PaddingRight = UDim.new(0, 5)
            listPadding.PaddingBottom = UDim.new(0, 5)
            listPadding.Parent = dropdownList
            
            -- Dropdown state and functions
            local isOpen = false
            local selectedValues = multi and {} or nil
            
            -- Initialize with default values
            if multi and type(default) == "table" then
                for _, v in pairs(default) do
                    selectedValues[v] = true
                end
            elseif not multi and default then
                selectedValues = default
            end
            
            local function updateDropdownText()
                if multi then
                    local selected = {}
                    for value, _ in pairs(selectedValues) do
                        table.insert(selected, tostring(value))
                    end
                    
                    if #selected > 0 then
                        dropdownText.Text = table.concat(selected, ", ")
                    else
                        dropdownText.Text = "Select items..."
                    end
                else
                    if selectedValues then
                        dropdownText.Text = tostring(selectedValues)
                    else
                        dropdownText.Text = "Select an item..."
                    end
                end
            end
            
            local function toggleDropdown()
                isOpen = not isOpen
                
                if isOpen then
                    -- Open dropdown
                    dropdownList.Visible = true
                    dropdownList.Size = UDim2.new(1, 0, 0, math.min(200, listLayout.AbsoluteContentSize.Y + 10))
                    
                    -- Rotate arrow
                    TweenService:Create(dropdownArrow, TweenInfo.new(0.2), {
                        Rotation = 180
                    }):Play()
                else
                    -- Close dropdown
                    TweenService:Create(dropdownList, TweenInfo.new(0.2), {
                        Size = UDim2.new(1, 0, 0, 0)
                    }):Play()
                    
                    -- Rotate arrow back
                    TweenService:Create(dropdownArrow, TweenInfo.new(0.2), {
                        Rotation = 0
                    }):Play()
                    
                    -- Hide dropdown after animation
                    task.delay(0.2, function()
                        if not isOpen then
                            dropdownList.Visible = false
                        end
                    end)
                end
            end
            
            -- Create dropdown items
            local function createDropdownItems()
                -- Clear existing items
                for _, child in pairs(dropdownList:GetChildren()) do
                    if child:IsA("Frame") then
                        child:Destroy()
                    end
                end
                
                -- Create new items
                for i, value in pairs(values) do
                    local item = createRoundRect("Item", UDim2.new(1, 0, 0, 30), Library.CurrentTheme.ElementBackground, 6, dropdownList)
                    
                    -- Item text
                    local itemText = Instance.new("TextLabel")
                    itemText.Name = "Text"
                    itemText.Size = UDim2.new(1, -10, 1, 0)
                    itemText.Position = UDim2.new(0, 10, 0, 0)
                    itemText.BackgroundTransparency = 1
                    itemText.Font = Enum.Font.Gotham
                    itemText.Text = tostring(value)
                    itemText.TextColor3 = Library.CurrentTheme.TextColor
                    itemText.TextSize = 14
                    itemText.TextXAlignment = Enum.TextXAlignment.Left
                    itemText.Parent = item
                    
                    -- Selection indicator for multi-select
                    if multi then
                        local checkbox = createRoundRect("Checkbox", UDim2.new(0, 16, 0, 16), Library.CurrentTheme.ElementBackground, 4, item)
                        checkbox.Position = UDim2.new(1, -26, 0, 7)
                        
                        local checkmark = Instance.new("ImageLabel")
                        checkmark.Name = "Checkmark"
                        checkmark.Size = UDim2.new(0, 12, 0, 12)
                        checkmark.Position = UDim2.new(0, 2, 0, 2)
                        checkmark.BackgroundTransparency = 1
                        checkmark.Image = "rbxassetid://6031094667"
                        checkmark.ImageColor3 = Library.CurrentTheme.TextColor
                        checkmark.Visible = selectedValues[value] or false
                        checkmark.Parent = checkbox
                    end
                    
                    -- Item hover and click effects
                    item.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if multi then
                                -- Toggle selection
                                selectedValues[value] = not selectedValues[value]
                                
                                -- Update checkmark
                                local checkmark = item.Checkbox.Checkmark
                                checkmark.Visible = selectedValues[value]
                                
                                -- Update text and callback
                                updateDropdownText()
                                Library.Options[id] = {Value = selectedValues}
                                callback(selectedValues)
                            else
                                -- Single selection
                                selectedValues = value
                                
                                -- Update text and callback
                                updateDropdownText()
                                Library.Options[id] = {Value = selectedValues}
                                callback(selectedValues)
                                
                                -- Close dropdown
                                toggleDropdown()
                            end
                        elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                            -- Hover effect
                            TweenService:Create(item, TweenInfo.new(0.1), {
                                BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                            }):Play()
                        end
                    end)
                    
                    item.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            -- Remove hover effect
                            TweenService:Create(item, TweenInfo.new(0.1), {
                                BackgroundColor3 = Library.CurrentTheme.ElementBackground
                            }):Play()
                        end
                    end)
                end
                
                -- Update list size
                dropdownList.Size = UDim2.new(1, 0, 0, isOpen and math.min(200, listLayout.AbsoluteContentSize.Y + 10) or 0)
            end
            
            -- Initialize dropdown items
            createDropdownItems()
            updateDropdownText()
            
            -- Dropdown button interaction
            dropdownButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    toggleDropdown()
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(dropdownButton, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            dropdownButton.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(dropdownButton, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.DropdownBackground
                    }):Play()
                end
            end)
            
            dropdownContainer.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(dropdownContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            dropdownContainer.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(dropdownContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            -- Close dropdown when clicking outside
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and isOpen then
                    local mousePos = UserInputService:GetMouseLocation()
                    local dropdownPos = dropdownList.AbsolutePosition
                    local dropdownSize = dropdownList.AbsoluteSize
                    
                    if mousePos.X < dropdownPos.X or mousePos.X > dropdownPos.X + dropdownSize.X or
                       mousePos.Y < dropdownPos.Y or mousePos.Y > dropdownPos.Y + dropdownSize.Y then
                        if isOpen and not (mousePos.X >= dropdownButton.AbsolutePosition.X and
                                          mousePos.X <= dropdownButton.AbsolutePosition.X + dropdownButton.AbsoluteSize.X and
                                          mousePos.Y >= dropdownButton.AbsolutePosition.Y and
                                          mousePos.Y <= dropdownButton.AbsolutePosition.Y + dropdownButton.AbsoluteSize.Y) then
                            toggleDropdown()
                        end
                    end
                end
            end)
            
            -- Dropdown API
            function dropdownElement:SetValue(value)
                if multi and type(value) == "table" then
                    selectedValues = {}
                    for k, v in pairs(value) do
                        if type(k) == "number" then
                            selectedValues[v] = true
                        else
                            selectedValues[k] = v
                        end
                    end
                elseif not multi then
                    selectedValues = value
                end
                
                updateDropdownText()
                createDropdownItems() -- Refresh items to update checkmarks
                Library.Options[id] = {Value = selectedValues}
                callback(selectedValues)
            end
            
            function dropdownElement:GetValue()
                return selectedValues
            end
            
            function dropdownElement:SetValues(newValues)
                values = newValues
                createDropdownItems()
                updateDropdownText()
            end
            
            function dropdownElement:OnChanged(func)
                callback = func
            end
            
            Library.Options[id] = dropdownElement
            return dropdownElement
        end
        
        function tab:CreateInput(id, options)
            options = options or {}
            local inputElement = {}
            
            local title = options.Title or "Input"
            local placeholder = options.Placeholder or ""
            local default = options.Default or ""
            local numeric = options.Numeric or false
            local finished = options.Finished or false
            local callback = options.Callback or function() end
            
            -- Create input container
            local inputContainer = createRoundRect("InputContainer", UDim2.new(1, 0, 0, 50), Library.CurrentTheme.ElementBackground, 6, tabContent)
            
            -- Input layout
            local inputLayout = Instance.new("UIListLayout")
            inputLayout.FillDirection = Enum.FillDirection.Vertical
            inputLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            inputLayout.VerticalAlignment = Enum.VerticalAlignment.Top
            inputLayout.SortOrder = Enum.SortOrder.LayoutOrder
            inputLayout.Padding = UDim.new(0, 5)
            inputLayout.Parent = inputContainer
            
            local inputPadding = Instance.new("UIPadding")
            inputPadding.PaddingTop = UDim.new(0, 10)
            inputPadding.PaddingLeft = UDim.new(0, 10)
            inputPadding.PaddingRight = UDim.new(0, 10)
            inputPadding.PaddingBottom = UDim.new(0, 10)
            inputPadding.Parent = inputContainer
            
            -- Input title
            local inputTitle = Instance.new("TextLabel")
            inputTitle.Name = "Title"
            inputTitle.Size = UDim2.new(1, 0, 0, 20)
            inputTitle.BackgroundTransparency = 1
            inputTitle.Font = Enum.Font.GothamSemibold
            inputTitle.Text = title
            inputTitle.TextColor3 = Library.CurrentTheme.TextColor
            inputTitle.TextSize = 14
            inputTitle.TextXAlignment = Enum.TextXAlignment.Left
            inputTitle.Parent = inputContainer
            
            -- Input box
            local inputBox = createRoundRect("InputBox", UDim2.new(1, 0, 0, 30), Library.CurrentTheme.InputBackground, 6, inputContainer)
            
            -- Input text box
            local textBox = Instance.new("TextBox")
            textBox.Name = "TextBox"
            textBox.Size = UDim2.new(1, -20, 1, 0)
            textBox.Position = UDim2.new(0, 10, 0, 0)
            textBox.BackgroundTransparency = 1
            textBox.Font = Enum.Font.Gotham
            textBox.Text = default
            textBox.PlaceholderText = placeholder
            textBox.TextColor3 = Library.CurrentTheme.TextColor
            textBox.PlaceholderColor3 = Library.CurrentTheme.SubTextColor
            textBox.TextSize = 14
            textBox.TextXAlignment = Enum.TextXAlignment.Left
            textBox.ClearTextOnFocus = false
            textBox.Parent = inputBox
            
            -- Input state and functions
            local value = default
            
            -- Input interactions
            textBox.Focused:Connect(function()
                -- Focus effect
                TweenService:Create(inputBox, TweenInfo.new(0.2), {
                    BackgroundColor3 = Library.CurrentTheme.Accent
                }):Play()
            end)
            
            textBox.FocusLost:Connect(function(enterPressed)
                -- Remove focus effect
                TweenService:Create(inputBox, TweenInfo.new(0.2), {
                    BackgroundColor3 = Library.CurrentTheme.InputBackground
                }):Play()
                
                -- Update value
                if numeric then
                    local num = tonumber(textBox.Text)
                    if num then
                        value = num
                        textBox.Text = tostring(num)
                    else
                        textBox.Text = tostring(value)
                    end
                else
                    value = textBox.Text
                end
                
                -- Callback
                if finished and enterPressed or not finished then
                    Library.Options[id] = {Value = value}
                    callback(value)
                end
            end)
            
            textBox:GetPropertyChangedSignal("Text"):Connect(function()
                if not finished then
                    if numeric then
                        local num = tonumber(textBox.Text)
                        if num then
                            value = num
                        end
                    else
                        value = textBox.Text
                    end
                    
                    Library.Options[id] = {Value = value}
                    callback(value)
                end
            end)
            
            inputContainer.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(inputContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            inputContainer.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(inputContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            -- Input API
            function inputElement:SetValue(newValue)
                if numeric and type(newValue) == "number" or not numeric then
                    value = newValue
                    textBox.Text = tostring(newValue)
                    Library.Options[id] = {Value = value}
                    callback(value)
                end
            end
            
            function inputElement:GetValue()
                return value
            end
            
            function inputElement:OnChanged(func)
                callback = func
            end
            
            Library.Options[id] = inputElement
            return inputElement
        end
        
        function tab:CreateColorpicker(id, options)
            options = options or {}
            local colorpickerElement = {}
            
            local title = options.Title or "Colorpicker"
            local description = options.Description
            local default = options.Default or Color3.fromRGB(255, 255, 255)
            local transparency = options.Transparency or 0
            local callback = options.Callback or function() end
            
            -- Create colorpicker container
            local colorpickerContainer = createRoundRect("ColorpickerContainer", UDim2.new(1, 0, 0, description and 70 or 50), Library.CurrentTheme.ElementBackground, 6, tabContent)
            
            -- Colorpicker layout
            local colorpickerLayout = Instance.new("UIListLayout")
            colorpickerLayout.FillDirection = Enum.FillDirection.Vertical
            colorpickerLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
            colorpickerLayout.VerticalAlignment = Enum.VerticalAlignment.Top
            colorpickerLayout.SortOrder = Enum.SortOrder.LayoutOrder
            colorpickerLayout.Padding = UDim.new(0, 5)
            colorpickerLayout.Parent = colorpickerContainer
            
            local colorpickerPadding = Instance.new("UIPadding")
            colorpickerPadding.PaddingTop = UDim.new(0, 10)
            colorpickerPadding.PaddingLeft = UDim.new(0, 10)
            colorpickerPadding.PaddingRight = UDim.new(0, 10)
            colorpickerPadding.PaddingBottom = UDim.new(0, 10)
            colorpickerPadding.Parent = colorpickerContainer
            
            -- Colorpicker title
            local colorpickerTitle = Instance.new("TextLabel")
            colorpickerTitle.Name = "Title"
            colorpickerTitle.Size = UDim2.new(1, -40, 0, 20)
            colorpickerTitle.BackgroundTransparency = 1
            colorpickerTitle.Font = Enum.Font.GothamSemibold
            colorpickerTitle.Text = title
            colorpickerTitle.TextColor3 = Library.CurrentTheme.TextColor
            colorpickerTitle.TextSize = 14
            colorpickerTitle.TextXAlignment = Enum.TextXAlignment.Left
            colorpickerTitle.Parent = colorpickerContainer
            
            -- Colorpicker description (if provided)
            if description then
                local colorpickerDesc = Instance.new("TextLabel")
                colorpickerDesc.Name = "Description"
                colorpickerDesc.Size = UDim2.new(1, -40, 0, 16)
                colorpickerDesc.BackgroundTransparency = 1
                colorpickerDesc.Font = Enum.Font.Gotham
                colorpickerDesc.Text = description
                colorpickerDesc.TextColor3 = Library.CurrentTheme.SubTextColor
                colorpickerDesc.TextSize = 12
                colorpickerDesc.TextXAlignment = Enum.TextXAlignment.Left
                colorpickerDesc.Parent = colorpickerContainer
            end
            
            -- Color display
            local colorDisplay = createRoundRect("ColorDisplay", UDim2.new(0, 30, 0, 30), default, 6, colorpickerContainer)
            colorDisplay.Position = UDim2.new(1, -30, 0, 0)
            
            -- Color picker popup
            local pickerPopup = createRoundRect("PickerPopup", UDim2.new(0, 240, 0, 240), Library.CurrentTheme.SecondaryBackground, 6, gui)
            pickerPopup.Visible = false
            pickerPopup.ZIndex = 100
            
            -- Add shadow to popup
            createShadow(pickerPopup)
            
            -- Color saturation and hue
            local saturationPicker = createRoundRect("SaturationPicker", UDim2.new(1, -30, 0, 180), Color3.fromRGB(255, 0, 0), 6, pickerPopup)
            saturationPicker.Position = UDim2.new(0, 10, 0, 10)
            saturationPicker.ZIndex = 101
            
            -- Saturation gradient
            local saturationGradient = Instance.new("UIGradient")
            saturationGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
            })
            saturationGradient.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(1, 0)
            })
            saturationGradient.Rotation = 90
            saturationGradient.Parent = saturationPicker
            
            -- Brightness gradient
            local brightnessGradient = Instance.new("UIGradient")
            brightnessGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
            })
            brightnessGradient.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 1),
                NumberSequenceKeypoint.new(1, 0)
            })
            brightnessGradient.Rotation = 0
            brightnessGradient.Parent = saturationPicker
            
            -- Saturation picker cursor
            local saturationCursor = createRoundRect("Cursor", UDim2.new(0, 10, 0, 10), Color3.fromRGB(255, 255, 255), 5, saturationPicker)
            saturationCursor.ZIndex = 102
            saturationCursor.AnchorPoint = Vector2.new(0.5, 0.5)
            
            -- Hue slider
            local hueSlider = createRoundRect("HueSlider", UDim2.new(0, 20, 0, 180), Color3.fromRGB(255, 0, 0), 6, pickerPopup)
            hueSlider.Position = UDim2.new(1, -30, 0, 10)
            hueSlider.ZIndex = 101
            
            -- Hue gradient
            local hueGradient = Instance.new("UIGradient")
            hueGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
            })
            hueGradient.Rotation = 90
            hueGradient.Parent = hueSlider
            
            -- Hue slider cursor
            local hueCursor = createRoundRect("Cursor", UDim2.new(1, 0, 0, 2), Color3.fromRGB(255, 255, 255), 1, hueSlider)
            hueCursor.ZIndex = 102
            
            -- Transparency slider (if enabled)
            local transparencySlider = nil
            local transparencyCursor = nil
            
            if options.Transparency ~= nil then
                transparencySlider = createRoundRect("TransparencySlider", UDim2.new(1, -20, 0, 20), default, 6, pickerPopup)
                transparencySlider.Position = UDim2.new(0, 10, 1, -30)
                transparencySlider.ZIndex = 101
                
                -- Transparency gradient
                local transparencyGradient = Instance.new("UIGradient")
                transparencyGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, default),
                    ColorSequenceKeypoint.new(1, default)
                })
                transparencyGradient.Transparency = NumberSequence.new({
                    NumberSequenceKeypoint.new(0, 0),
                    NumberSequenceKeypoint.new(1, 1)
                })
                transparencyGradient.Parent = transparencySlider
                
                -- Transparency cursor
                transparencyCursor = createRoundRect("Cursor", UDim2.new(0, 2, 1, 0), Color3.fromRGB(255, 255, 255), 1, transparencySlider)
                transparencyCursor.ZIndex = 102
                transparencyCursor.Position = UDim2.new(1 - transparency, 0, 0, 0)
            end
            
            -- Color state and functions
            local color = default
            local hue, sat, val = Color3.toHSV(default)
            local alpha = 1 - transparency
            
            local function updateColorDisplay()
                colorDisplay.BackgroundColor3 = color
                
                if transparencySlider then
                    transparencySlider.BackgroundColor3 = color
                    transparencyGradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, color),
                        ColorSequenceKeypoint.new(1, color)
                    })
                end
            end
            
            local function updateHueSatVal()
                -- Update saturation picker color
                saturationGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromHSV(hue, 1, 1))
                })
                
                -- Update cursors
                saturationCursor.Position = UDim2.new(sat, 0, 1 - val, 0)
                hueCursor.Position = UDim2.new(0, 0, hue, 0)
                
                if transparencySlider then
                    transparencyCursor.Position = UDim2.new(alpha, 0, 0, 0)
                end
                
                -- Update color
                color = Color3.fromHSV(hue, sat, val)
                updateColorDisplay()
                
                -- Update option and callback
                Library.Options[id] = {Value = color, Transparency = transparency}
                callback(color)
            end
            
            -- Initialize
            updateHueSatVal()
            
            -- Colorpicker interactions
            colorDisplay.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    -- Toggle color picker popup
                    pickerPopup.Visible = not pickerPopup.Visible
                    
                    if pickerPopup.Visible then
                        -- Position popup near the colorpicker
                        local colorDisplayPos = colorDisplay.AbsolutePosition
                        local colorDisplaySize = colorDisplay.AbsoluteSize
                        
                        pickerPopup.Position = UDim2.new(0, colorDisplayPos.X + colorDisplaySize.X - pickerPopup.AbsoluteSize.X, 
                                                        0, colorDisplayPos.Y + colorDisplaySize.Y + 10)
                    end
                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Hover effect
                    TweenService:Create(colorpickerContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackgroundHover
                    }):Play()
                end
            end)
            
            colorDisplay.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    -- Remove hover effect
                    TweenService:Create(colorpickerContainer, TweenInfo.new(0.1), {
                        BackgroundColor3 = Library.CurrentTheme.ElementBackground
                    }):Play()
                end
            end)
            
            -- Saturation picker interaction
            local saturationDragging = false
            
            saturationPicker.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    saturationDragging = true
                    
                    -- Update sat and val based on mouse position
                    local saturationPos = saturationPicker.AbsolutePosition
                    local saturationSize = saturationPicker.AbsoluteSize
                    local mousePos = input.Position
                    
                    sat = math.clamp((mousePos.X - saturationPos.X) / saturationSize.X, 0, 1)
                    val = 1 - math.clamp((mousePos.Y - saturationPos.Y) / saturationSize.Y, 0, 1)
                    
                    updateHueSatVal()
                end
            end)
            
            saturationPicker.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    saturationDragging = false
                end
            end)
            
            -- Hue slider interaction
            local hueDragging = false
            
            hueSlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    hueDragging = true
                    
                    -- Update hue based on mouse position
                    local huePos = hueSlider.AbsolutePosition
                    local hueSize = hueSlider.AbsoluteSize
                    local mousePos = input.Position
                    
                    hue = math.clamp((mousePos.Y - huePos.Y) / hueSize.Y, 0, 1)
                    
                    updateHueSatVal()
                end
            end)
            
            hueSlider.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    hueDragging = false
                end
            end)
            
            -- Transparency slider interaction (if enabled)
            local transparencyDragging = false
            
            if transparencySlider then
                transparencySlider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        transparencyDragging = true
                        
                        -- Update transparency based on mouse position
                        local transparencyPos = transparencySlider.AbsolutePosition
                        local transparencySize = transparencySlider.AbsoluteSize
                        local mousePos = input.Position
                        
                        alpha = math.clamp((mousePos.X - transparencyPos.X) / transparencySize.X, 0, 1)
                        transparency = 1 - alpha
                        
                        updateHueSatVal()
                    end
                end)
                
                transparencySlider.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        transparencyDragging = false
                    end
                end)
            end
            
            -- Update when dragging
            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if saturationDragging then
                        -- Update sat and val based on mouse position
                        local saturationPos = saturationPicker.AbsolutePosition
                        local saturationSize = saturationPicker.AbsoluteSize
                        local mousePos = input.Position
                        
                        sat = math.clamp((mousePos.X - saturationPos.X) / saturationSize.X, 0, 1)
                        val = 1 - math.clamp((mousePos.Y - saturationPos.Y) / saturationSize.Y, 0, 1)
                        
                        updateHueSatVal()
                    elseif hueDragging then
                        -- Update hue based on mouse position
                        local huePos = hueSlider.AbsolutePosition
                        local hueSize = hueSlider.AbsoluteSize
                        local mousePos = input.Position
                        
                        hue = math.clamp((mousePos.Y - huePos.Y) / hueSize.Y, 0, 1)
                        
                        updateHueSatVal()
                    elseif transparencyDragging and transparencySlider then
                        -- Update transparency based on mouse position
                        local transparencyPos = transparencySlider.AbsolutePosition
                        local transparencySize = transparencySlider.AbsoluteSize
                        local mousePos = input.Position
                        
                        alpha = math.clamp((mousePos.X - transparencyPos.X) / transparencySize.X, 0, 1)
                        transparency = 1 - alpha
                        
                        updateHueSatVal()
                    end
                end
            end)
            
            -- Close popup when clicking outside
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and pickerPopup.Visible then
                    local mousePos = UserInputService:GetMouseLocation()
                    local pickerPos = pickerPopup.AbsolutePosition
                    local pickerSize = pickerPopup.AbsoluteSize
                    
                    if mousePos.X < pickerPos.X or mousePos.X > pickerPos.X + pickerSize.X or
                       mousePos.Y < pickerPos.Y or mousePos.Y > pickerPos.Y + pickerSize.Y then
                        if not (mousePos.X >= colorDisplay.AbsolutePosition.X and
                               mousePos.X <= colorDisplay.AbsolutePosition.X + colorDisplay.AbsoluteSize.X and
                               mousePos.Y >= colorDisplay.AbsolutePosition.Y and
                               mousePos.Y <= colorDisplay.AbsolutePosition.Y + colorDisplay.AbsoluteSize.Y) then
                            pickerPopup.Visible = false
                        end
                    end
                end
            end)
            
            -- Colorpicker API
            function colorpickerElement:SetValue(newColor, newTransparency)
                color = newColor
                
                if newTransparency ~= nil then
                    transparency = newTransparency
                    alpha = 1 - transparency
                end
                
                hue, sat, val = Color3.toHSV(color)
                updateHueSatVal()
                
                Library.Options[id] = {Value = color, Transparency = transparency}
                callback(color, transparency)
            end
            
            function colorpickerElement:GetValue()
                return color, transparency
            end
            
            function colorpickerElement:OnChanged(func)
                callback = func
            end
            
            Library.Options[id] = colorpickerElement
            return colorpickerElement
        end
        
        function tab:CreateLabel(options)
            options = options or {}
            local labelElement = {}
            
            local text = options.Text or "Label"
            local alignment = options.Alignment or Enum.TextXAlignment.Left
            
            -- Create label container
            local labelContainer = Instance.new("Frame")
            labelContainer.Name = "LabelContainer"
            labelContainer.Size = UDim2.new(1, 0, 0, 20)
            labelContainer.BackgroundTransparency = 1
            labelContainer.Parent = tabContent
            
            -- Label text
            local labelText = Instance.new("TextLabel")
            labelText.Name = "Text"
            labelText.Size = UDim2.new(1, 0, 1, 0)
            labelText.BackgroundTransparency = 1
            labelText.Font = Enum.Font.GothamSemibold
            labelText.Text = text
            labelText.TextColor3 = Library.CurrentTheme.TextColor
            labelText.TextSize = 14
            labelText.TextXAlignment = alignment
            labelText.Parent = labelContainer
            
            -- Label API
            function labelElement:SetText(newText)
                labelText.Text = newText
            end
            
            return labelElement
        end
        
        function tab:CreateDivider()
            -- Create divider container
            local dividerContainer = Instance.new("Frame")
            dividerContainer.Name = "DividerContainer"
            dividerContainer.Size = UDim2.new(1, 0, 0, 10)
            dividerContainer.BackgroundTransparency = 1
            dividerContainer.Parent = tabContent
            
            -- Divider line
            local dividerLine = Instance.new("Frame")
            dividerLine.Name = "Line"
            dividerLine.Size = UDim2.new(1, 0, 0, 1)
            dividerLine.Position = UDim2.new(0, 0, 0.5, 0)
            dividerLine.BackgroundColor3 = Library.CurrentTheme.DividerColor
            dividerLine.BorderSizePixel = 0
            dividerLine.Parent = dividerContainer
            
            return dividerContainer
        end
        
        return tab
    end
    
    -- Select a tab
    function window:SelectTab(tabIndex)
        for i, tab in pairs(tabs) do
            if i == tabIndex then
                -- Select this tab
                TweenService:Create(tab.Button, TweenInfo.new(0.2), {
                    BackgroundColor3 = Library.CurrentTheme.TabSelected
                }):Play()
                tab.Content.Visible = true
                currentTab = i
            else
                -- Deselect other tabs
                TweenService:Create(tab.Button, TweenInfo.new(0.2), {
                    BackgroundColor3 = Library.CurrentTheme.ElementBackground
                }):Play()
                tab.Content.Visible = false
            end
        end
    end
    
    return window
end

-- Get option value
function Library:GetOption(id)
    if Library.Options[id] then
        if type(Library.Options[id]) == "table" and Library.Options[id].Value ~= nil then
            return Library.Options[id].Value
        else
            return Library.Options[id]
        end
    end
    return nil
end

-- Set theme
function Library:SetTheme(theme)
    if type(theme) == "string" then
        -- Use preset theme
        if Library.Themes[theme] then
            Library.CurrentTheme = Library.Themes[theme]
        end
    elseif type(theme) == "table" then
        -- Use custom theme
        Library.CurrentTheme = theme
    end
end

-- Return the library
return Library
